---
title: "Introducción al IDE RStudio y algunos comandos básicos"
author: "Gerardo Esteban Gómez-Santiago"
date: "2025-01-06"
subtitle: "Taller introductorio al análisis estadístico en R"
format: 
  revealjs:
    footer: "Módulo 1 - Introducción a RStudio"
    transition: fade
    logo: tidyversoLogo.png
    background-image: gray_background.jpg 
    title-slide-attributes: 
      data-background-image: gray_background.jpg
---

## ¿Por qué programar en R? {.scrollable}

-   Es software libre.
-   Es una habilidad que ha tomado relevancia y ha empezado a ser valorada en el mercado laboral, sobre todo en nuevos nichos vinculados al análisis de datos y a la ciencia de datos.
-   En el mundo académico es el software más utilizado para generar evidencia empírica cuantitativa.
-   En R es posible garantizar la replicabilidad de mis estudios y análisis.
-   Si son muchos datos el Excel no alcanza.
-   Puedo automatizar procesos.
-   Tiene una curva de aprendizaje menos compleja si se la compara con lenguajes de programación similares como Python o Julia.
-   La comunidad de R es mucho más estricta respecto a los estándares de calidad de las librerías, hay una revisión exhaustiva de su contenido antes de ser aceptadas en el repositorio CRAN (Comprehensive R Archive Network).

## ¿Particularidades de R? {.scrollable}

- R es un lenguaje de programación orientado a objetos (pueden buscarlo como [POO](https://es.wikipedia.org/wiki/Programaci%C3%B3n_orientada_a_objetos)), esto hace que su sintáxis sea relativamente simple. 
- De manera muy sencilla debemos saber crear y modificar objetos. 
- Un atributo importante de los objetos es la clase. Por ejemplo, una base de datos es clase `"data.frame"` o `"tibble"`, esto es importante porque algunos métodos u operaciones solo pueden aplicarse a cierta clase de objetos.

# Manejo de RStudio

## Cuadrantes

En general, en RStudio se trabaja con cuatro cuadrantes entre los cuales se distribuye la pantalla (imágen de abajo).

![](IDERstudio.png)

## Cuadrantes {.scrollable}

- **Script o Editor de código (cuadrante superior izquierdo):** El script es un documento en el que se almacena un conjunto sucesivo de órdenes que el software R debe realizar, puede ser solo código (archivo .R) o un documento que combina texto y código (archivos .qmd o .Rmd)
- **Consola (cuadrante inferior izquierdo):** Es el cerebro de mi RStudio, en la consola se refleja la ejecución de las ordenes de mi script, las cuáles viajan al software R y nos devuelve un pantallazo de los resultados.
- **Ambiente de trabajo (cuadrante superior derecho):** En este puedo ver aquellas órdenes u operaciones que he decidido almacenar con un nombre específico **(Objetos)**, las cuáles pueden ser llamadas o modificadas cada vez que lo considere necesario. Además, puede existir interacción entre dichos objetos.
- **Archivo y pantalla de visualización (cuadrante inferior derecho):** En este cuadrante puedo ver los archivos que tengo disponibles para trabajar, obtener una visualización previa de los gráficos que genero y consultar la documentación oficial de paquetes y funciones *(Help)*.

# Directorio de trabajo

## ¿Que es?

RStudio es una aplicación que interactúa no solo con R sino también con la memoria de nuestro equipo, por lo que debemos elegir el espacio del cual R y RStudio va a tomar los archivos que necesitamos procesar o analizar (bases de datos, imágenes, plantillas, etc.) y el espacio donde va a almacenar los resultados que obtengamos (tablas, gráficos, nuevas bases de datos, documentos, etc.). Este espacio es uno solo y se conoce como **Directorio de Trabajo (DT)**.

## Consulta del directorio de trabajo

:::: {.columns}
::: {.column width="40%"}

Para consultar el DT la función a utilizar es `getwd()`, tan solo escribiendo el nombre de la función (sin poner nada adentro de los paréntesis) obtengo la ruta al espacio de la memoria de mi equipo que RStudio está utilizando.

:::
::: {.column width="60%"}

`Código:`

```{r echo=TRUE}

getwd() # Función para consultar la ruta del directorio de trabajo

```

:::
::::

## Modificación del directorio de trabajo

Si deseo modificar mi DT, porque existe una carpeta especifica que ya tengo creada para trabajar en RStudio, por ejemplo, una carpeta en la cual estoy almacenando las bases de datos que necesitó para mi proyecto de investigación. La función a utilizar es `setwd()`, dentro de los paréntesis, debo poner entre comillas la ruta de la carpeta que deseo utilizar.

```{r echo=TRUE}

# Ejemplo:

setwd("E:/Documents/Escritorio/tidyverso/tidyverso/cursoRLunes/RLunes/presentacion/nuevaRutaDT") 

```

::: {.callout-note appearance="simple"}
Cuando copias la ruta de la carpeta que deseas utilizar como directorio de trabajo, observarás que los slash están invertidos, R está configurado para reconocer el slash tradicional **("/")**, por lo que deberás cambiar cada uno de ellos.
:::

# RProject

## Creación de un RProject

Otra manera de definir el directorio de trabajo (la cual recomiendo ampliamente) es creando un R-Project, de esta manera defino mi directorio de trabajo antes de empezar a trabajar y me permite tener más orden en cuanto a los análisis que realizo (en el caso de un estudiante, puede generar un R-Project por materia, manejando los archivos que necesita para cada una por separado y cambiando fácilmente entre proyectos).

## Paso 1

![](np1.png)

## Paso 2

![](np2.png)

## Paso 3

![](np3.png)

## Paso 4

![](np4.png)

## Paso 5

Verifico qué se creó al observar entre mis archivos una nueva carpeta con el nombre que yo asigné y un cuadrito tridimensional azul con una ***R*** en el medio.

![](np5.png)

## 

Además, en mi RStudio, en la esquina superior derecha, arriba de mi ambiente de trabajo, puedo observar el cuadrito tridimensional azul con el nombre del proyecto creado.

![](np6.png)

Una vez creado el proyecto, tengo la seguridad que al ejecutar `getwd()` voy a obtener como resultado, la ruta de la carpeta que yo seleccione previamente para trabajar.

## ¿Por qué es tan importante el Directorio de Trabajo?

Es importante el directorio de trabajo porque es donde voy a almacenar lo que necesito, no puedo cargar ningún archivo en Rstudio si no está en mí directorio de trabajo, un mal manejo de este punto puede generar estrés y frustración por bloquear el inicio del análisis o de las tareas que vaya a realizar.

# Librerías o Paquetes

## ¿Que son? {.scrollable}

Todo lo que se quiera hacer en R se puede hacer a partir de sus comandos más básicos, sin embargo, hacer las cosas de esa manera es poco práctico y restringiría el acceso a potenciales usuarios que no tienen el tiempo y el conocimiento para hacer las cosas de esa manera.\
Para ahorrar tiempo y hacer más comprensibles los procesos que requerimos, una comunidad de expertos ha desarrollado paquetes o librerías que contienen funciones, las cuales facilitan la comprensión del lenguaje y el flujo de trabajo.

Algunos paquetes vienen cargados de manera predeterminada en el software, por lo que no requieren ningún comando de instalación o activación, pero muchos paquetes o librerías útiles deben ser cargadas y activadas a partir de órdenes en nuestro script.

## Instalación de paquetes

Cualquier paquete requiere ser instalado solamente una vez, la función para instalar paquetes es `install.packages()`, dentro del paréntesis debe ir entre comillas el nombre del paquete que deseamos instalar.

## Prueba de instalación

:::: {.columns}
::: {.column}

Un paquete muy utilizado para el análisis de datos es `{tidyverse}`, el cual contiene otros subpaquetes con distintas funcionalidades.
Haz la prueba de instalación con este paquete, llevara 2 o 3 minutos pero es fundamental para lo que realizaremos posteriormente. 

:::
::: {.column}


Acá abajo te dejo el código, solo asegúrate de copiarlo sin el símbolo **#** (este se utiliza para realizar comentarios y anula el código que se encuentra a su derecha, yo lo puse porque ya tengo instalado el paquete)

```{r echo=TRUE}

# install.packages("tidyverse")

```

:::
::::

## Activación de paquetes {.scrollable}

Una vez instalado el paquete para poder utilizarlo debes activarlo, esto se hace con la función `library()`, dentro de los paréntesis se pone el nombre del paquete o librería que deseamos utilizar (sin comillas).
Esto debe realizarse en cada inicio de sesión en RStudio. Abajo el código y el mensaje que se genera por defecto

```{r}
#| echo: true
#| message: true

library(tidyverse)

```

## Resumen instalación-activación de paquetes

::: {.callout-tip title="Librerías"}
- Instalación de paquetes solamente una vez Ej. `install.packages("tidyverse")`
- Activación de paquetes en cada inicio de sesión Ej. `library(tidyverse)`
:::

. . .

![](tidyverse.jpg)
